%YAML:1.0
#common parameters
imu_topic: "/imu/data_raw"
image_topic: "/image_raw"
output_path: "/home/jinyao/ros_ws/vins/pose_graph"

# camera calibration 
# model_type: MEI
# camera_name: ueye
# image_width: 808
# image_height: 608
# mirror_parameters:
#    xi: 2.8912638329943081e+00
# distortion_parameters:
#    k1: 2.0207975398275915e-01
#    k2: 9.2977549428744299e-01
#    p1: -2.0382862381713735e-03
#    p2: 1.2054123169050421e-02
# projection_parameters:
#    gamma1: 9.9874324637576376e+02
#    gamma2: 9.9326830441294044e+02
#    u0: 4.1512678566453332e+02
#    v0: 2.8310572116339074e+02

model_type: KANNALA_BRANDT
camera_name: ueye
image_width: 808
image_height: 608
projection_parameters:
   k2: -3.5548332893936725e-02
   k3: 1.3306698143023672e-02
   k4: -1.8082063172168955e-02
   k5: 5.1889504444810530e-03
   mu: 2.5863527885046824e+02
   mv: 2.5735673161249804e+02
   u0: 4.1850748613830933e+02
   v0: 2.8246034089530053e+02


# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam

extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-1, 0, 0, 
           0, 1, 0, 
           0, 0, -1]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.025,-0.010, -0.005]

# extrinsicRotation: !!opencv-matrix
#    rows: 3
#    cols: 3
#    dt: d
#    data: [ -9.9957177305899680e-01, -2.8651303090020088e-02,
#        5.9475486494436555e-03, -2.8599291772170233e-02,
#        9.9955350133598553e-01, 8.6532350657037606e-03,
#        -6.1928195374941868e-03, 8.4794338381671761e-03,
#        -9.9994487257446374e-01 ]
# extrinsicTranslation: !!opencv-matrix
#    rows: 3
#    cols: 1
#    dt: d
#    data: [ 2.5608938000215003e-02, -2.1176902663175522e-02,
#        -4.9105462325152553e-03 ]

#feature traker paprameters
max_cnt: 80            # max feature number in feature tracking 150
min_dist: 20            # min distance between two features 20
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 2        # ransac threshold (pixel) 2
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 1              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
track_window_size: 10   # number of frames for calculate the features' score

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time 0.04
max_num_iterations: 10   # max solver itrations, to guarantee real time
keyframe_parallax: 50.0 # keyframe selection threshold (pixel) 10

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.8          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.3         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.02         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 4.0e-3       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.8100      # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 1             # useful in real-time and large project
pose_graph_save_path: output_path # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0                               # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
